#GERMAN ON THE MOON
#TO DO Le systeme des projets fonctionne (mais il faut travailler la base de données, voir si je peux demanderà chat GPT)
#Je dois faire le programme des sous taches et rajouter des calculs 

# Charger la bibliothèque tidyverse
library(tidyverse)
library(arrow)
library(tidyr)
library(dplyr)
library(ggplot2)
library(openxlsx)
library(hablar)
library(ggridges)
library(stringr)
library(cowplot)
library(scales)


#1. Importation du tableau evenement qui va regrouper toute les données jour après jour ----



TABLEAU_EVENEMENT <- read.xlsx("C:/Users/u99amo/Downloads/GotM_TABLEAU_EVENEMENT.xlsx", sheet = "Feuil1", colNames = TRUE, detectDates = TRUE )
#2 Creation du tableau actions avec les taches et les projets

TABLEAU_ACTIONS<- read.xlsx("C:/Users/u99amo/Downloads/GotM_tableau_actions.xlsx", sheet = "Feuil1", colNames = TRUE, detectDates = TRUE )

TABLEAU_ACTIONS$joueur<-as.integer(TABLEAU_ACTIONS$joueur)
TABLEAU_ACTIONS$Temps._joueurs<-as.Date (TABLEAU_ACTIONS$Temps._joueurs)
TABLEAU_ACTIONS%>%glimpse()

#choixdelaligne dans tableau evenement à remplacer par une formule 
i<-1

#3 Création du formulaire de question pour le joueur----
##3.A on lui demande de choisir le projet en fonction des règles de conditions pour chaque missions ----
TABLEAU_ACTIONS_projet_disponible <- TABLEAU_ACTIONS %>%   
  filter(`projet/taches` == "Projet") %>%
  filter(début.date.validité <= TABLEAU_EVENEMENT$Date[i]) %>%
  filter(fin.date.validité >= TABLEAU_EVENEMENT$Date[i]) %>%
  filter(Conditions_Tonnes_Equipements <= TABLEAU_EVENEMENT$Tonnes_Equipements[i]) %>%
  filter(Conditions_Tonnes_Eau <= TABLEAU_EVENEMENT$Tonnes_Eau[i]) %>%
  filter(Conditions_Tonnes_Nourriture <= TABLEAU_EVENEMENT$Tonnes_Nourriture[i]) %>%
  filter(Conditions_Tonnes_Oxygene <= TABLEAU_EVENEMENT$Tonnes_Oxygene[i]) %>%
  filter(Conditions_Tonnes_Essence_fusee <= TABLEAU_EVENEMENT$Tonnes_Essence_fusee[i]) %>%
  filter(Conditions_Unites_Bulldozzer <= TABLEAU_EVENEMENT$Unites_Bulldozzer[i]) %>%
  filter(Conditions_Unites_Camions <= TABLEAU_EVENEMENT$Unites_Camions[i]) %>%
  filter(Conditions_Surface_Habitation <= TABLEAU_EVENEMENT$Surface_Habitation[i]) %>%
  filter(Conditions_Surface_Biodome <= TABLEAU_EVENEMENT$Surface_Biodome[i]) %>%
  filter(Conditions_Surface_Atelier <= TABLEAU_EVENEMENT$Surface_Atelier[i]) %>%
  filter(Conditions_Surface_Total_base <= TABLEAU_EVENEMENT$Surface_Total_base[i]) %>%
  filter(Conditions_Unites_Population <= TABLEAU_EVENEMENT$Unites_Population[i]) %>%
  filter(Conditions_Pourcentage_Adhesion_ideologique_soldat <= TABLEAU_EVENEMENT$Pourcentage_Adhesion_ideologique_soldat[i]) %>%
  filter(Conditions_Pourcentage_Adhesion_ideologique_officier <= TABLEAU_EVENEMENT$Pourcentage_Adhesion_ideologique_officier[i]) %>%
  filter(Conditions_Pourcentage_Adhesion_ideologique_civil <= TABLEAU_EVENEMENT$Pourcentage_Adhesion_ideologique_civil[i]) %>%
  filter(Conditions_Unites_Officier <= TABLEAU_EVENEMENT$Unites_Officier[i]) %>%
  filter(Conditions_Unites_Civil <= TABLEAU_EVENEMENT$Unites_Civil[i]) %>%
  filter(Conditions_Unites_Soldats <= TABLEAU_EVENEMENT$Unites_Soldats[i]) %>%
  filter(Conditions_Unites_V2 <= TABLEAU_EVENEMENT$Unites_V2[i]) %>%
  filter(Conditions_Pourcentage_Detection_Sovietique <= TABLEAU_EVENEMENT$Pourcentage_Detection_Sovietique[i]) %>%
  filter(Conditions_Pourcentage_Detection_USA <= TABLEAU_EVENEMENT$Pourcentage_Detection_USA[i]) %>%
  filter(Conditions_Unites_arme_super_puissante <= TABLEAU_EVENEMENT$Unites_arme_super_puissante[i]) %>%
  filter(Conditions_KWperiode_electricite <= TABLEAU_EVENEMENT$KWperiode_electricite[i]) %>%
  filter(Conditions_Tonnes_charbon <= TABLEAU_EVENEMENT$Tonnes_charbon[i]) %>%
  filter(Conditions_Tonnes_uranium <= TABLEAU_EVENEMENT$Tonnes_uranium[i]) %>%
  filter(Conditions_Tonnes_gaz <= TABLEAU_EVENEMENT$Tonnes_gaz[i])%>%select(titre)

print(TABLEAU_ACTIONS_projet_disponible$titre)

# Demander à l'utilisateur de choisir un titre
choix_titre <- readline(prompt="Veuillez choisir un titre sans les guillements : ")

### PAUSE ECRIRE LA REPONSE

# Vérifier si le titre choisi existe dans le dataframe
if (choix_titre %in% TABLEAU_ACTIONS$titre) {
  # Rajouter le projet suivi ainsi que la date
  info_joueur <- 1
  
  
  # Mettre à jour la colonne "joueur" pour la ligne choisie
  TABLEAU_ACTIONS[TABLEAU_ACTIONS$titre == choix_titre, "joueur"] <- info_joueur
  
  print("L'information du joueur a été mise à jour avec succès.")
} else {
  print("Le titre choisi n'existe pas dans le dataframe.")
}

#3.B On lui présente 





# Création d'un vecteur pour stocker les réponses de l'utilisateur
joueur <- character(length(titre))
# Boucle pour demander à l'utilisateur de saisir une réponse pour chaque ligne du tableau
for (i in 1:nrow(TABLEAU_ACTIONS_projet)) {
  message(paste("Que voulez-vous faire avec la tâche '", TABLEAU_ACTIONS_projet$titre[i], "' ? (faire = 1 /ne jamais faire = 2/ attendre = 3)"))
  joueur[i] <- readline(prompt = "")
}

#eccrire les réponse

#faire tourner la suite du code


# Ajout de la colonne "joueur" au data frame
TABLEAU_ACTIONS$joueur <- joueur

# Affichage du data frame mis à jour
TABLEAU_ACTIONS





# Demander à l'utilisateur d'entrer une valeur 
print("Entrez une valeur :")
x <- as.numeric(readline())

# Définir une fonction qui utilise la valeur entrée 
f <- function() {
  resultat <- x * 2
  print(resultat)
}

# Exécuter la fonction
f()

# Demander à l'utilisateur d'entrer une nouvelle valeur
# et ré-exécuter la fonction
print("Entrez une nouvelle valeur :") 
x <- as.numeric(readline()) 
f()
