#GERMAN ON THE MOON
#je dois faire un message d'erreur si le tableau projet encours n'a plusde place
# je dois faire un message d'erreur si les pourcentage dépasse 100% ou vont en dessous de 0%
# Je dois faire un programme pour changer de programme en cours
# Je dois introduire une valeur alétoire pour faire planter le changement d'options qui soit permanent (et pas juste unefois )
# rajouter une fonction pour obliger à passer le tour après avoir choisis une option
#corriger le bug dans le FOR que j'ai créé


#Lancement du jeux----

# Charger la bibliothèque tidyverse
library(tidyverse)
library(arrow)
library(tidyr)
library(dplyr)
library(ggplot2)
library(openxlsx)
library(hablar)
library(ggridges)
library(stringr)
library(cowplot)
library(scales)
library(lubridate)
#install.packages("openxlsx")
library(openxlsx)
library(dplyr)
#install.packages("purrr")
library(purrr)

#Lancement du jeux fin----



### Bouton reset du jeu ----

#Le DF_EVENEMENT_ressources reprend toute les ressources jour par jour ainsi que les dates, c'est le tableau historique des ressources
DF_EVENEMENT_ressources<- read.xlsx("C:/Users/u99amo/Downloads/German on the moon.xlsx", sheet = "DF_EVENEMENT_ressources", colNames = TRUE, detectDates = TRUE )
DF_EVENEMENT_ressources$Tonnes_Nourriture<-as.double(DF_EVENEMENT_ressources$Tonnes_Nourriture)
DF_EVENEMENT_ressources$Tonnes_Oxygene<-as.double(DF_EVENEMENT_ressources$Tonnes_Oxygene)


#Le DF_projet_Condtions_projets reprend les conditions des projets déja réalisé pour en lancer un nouveau 
DF_projet_Condtions_projets<- read.xlsx("C:/Users/u99amo/Downloads/German on the moon.xlsx", sheet = "DF_projet_Condtions_projets", colNames = TRUE, detectDates = TRUE )

#Le DF_projet_conditions_ressources reprend les conditions nécéssaire en ressources pour autoriser un projet 
DF_projet_conditions_ressources<- read.xlsx("C:/Users/u99amo/Downloads/German on the moon.xlsx", sheet = "DF_projet_conditions_ressources", colNames = TRUE, detectDates = TRUE )

#Le DF_projet_optionsetapestxt reprend le texte pour chaque options et projets qui doit s'afficher
DF_projet_optionsetapestxt<- read.xlsx("C:/Users/u99amo/Downloads/German on the moon.xlsx", sheet = "DF_projet_optionsetapestxt", colNames = TRUE, detectDates = TRUE )

#Le DF_projet_optionsetapestrue indique pour chaque projet et chaque options et tache si elle sont réalisé ou pas
DF_projet_optionsetapestrue<- read.xlsx("C:/Users/u99amo/Downloads/German on the moon.xlsx", sheet = "DF_projet_optionsetapestrue", colNames = TRUE, detectDates = TRUE )

#Le DF_projet_ress_var_mens indique le changement de variation de consomation suite à l'input de chaque projet pour chaque projet, c'est une table de référence qui ne change pas
DF_projet_ress_var_mens<- read.xlsx("C:/Users/u99amo/Downloads/German on the moon.xlsx", sheet = "DF_projet_ress_var_mens", colNames = TRUE, detectDates = TRUE )

#Le DF_projet_ress_var_realise indique le changement de variation de consomation suite à l'input de chaque projet quand le projet est réalisé la valeur est adapté dans ce tableau
DF_projet_ress_var_realise<- read.xlsx("C:/Users/u99amo/Downloads/German on the moon.xlsx", sheet = "DF_projet_ress_var_realise", colNames = TRUE, detectDates = TRUE )

#Le DF_projet_en_cours indique les4 projets qu'on peut réaliser simultanement
DF_projet_en_cours<- read.xlsx("C:/Users/u99amo/Downloads/German on the moon.xlsx", sheet = "DF_projet_en_cours", colNames = TRUE, detectDates = TRUE )
DF_projet_en_cours$projet<-""
DF_projet_en_cours$options<-""
DF_projet_en_cours$etat_avancement.sur.5<-0
DF_projet_en_cours$Etapes.en.en.cours<-0


#le tableau dataframe mixe energetique entre charbon, petrole et gaz
DF_mixenergetique <- data.frame(
  pourcentage_charbon = 1,
  pourcentage_gaz = 0,
  pourcentage_uranium = 0
)

numerodelaligne<- 1



#Création d'un fichier de sauvegarde
write.xlsx(DF_EVENEMENT_ressources, "C:/Users/u99amo/Downloads/German on the moon_sauvegarde.xlsx") 

#enregistrement des données dans ce fichier
# Charger le classeur
wb <- loadWorkbook("C:/Users/u99amo/Downloads/German on the moon_sauvegarde.xlsx")
removeWorksheet(wb, "Sheet 1")
# Ajouter une nouvelle feuille et écrire dans cette feuille. Si elle existe déja, elle sera remplacée
addWorksheet(wb, "DF_EVENEMENT_ressources")
writeData(wb, "DF_EVENEMENT_ressources", DF_EVENEMENT_ressources)

addWorksheet(wb, "DF_projet_Condtions_projets")
writeData(wb, "DF_projet_Condtions_projets", DF_projet_Condtions_projets)

addWorksheet(wb, "DF_projet_optionsetapestxt")
writeData(wb, "DF_projet_optionsetapestxt", DF_projet_optionsetapestxt)

addWorksheet(wb, "DF_projet_optionsetapestrue")
writeData(wb, "DF_projet_optionsetapestrue", DF_projet_optionsetapestrue)

addWorksheet(wb, "DF_mixenergetique")
writeData(wb, "DF_mixenergetique", DF_mixenergetique)

addWorksheet(wb, "DF_projet_ress_var_mens")
writeData(wb, "DF_projet_ress_var_mens", DF_projet_ress_var_mens)

addWorksheet(wb, "DF_projet_ress_var_realise")
writeData(wb, "DF_projet_ress_var_realise", DF_projet_ress_var_realise)

addWorksheet(wb, "DF_projet_en_cours")
writeData(wb, "DF_projet_en_cours", DF_projet_en_cours)


# Sauvegarder le classeur
saveWorkbook(wb, "C:/Users/u99amo/Downloads/German on the moon_sauvegarde.xlsx", overwrite = TRUE)



### Bouton reset du jeu (fin) ----



### Bouton tour suivant -----
#formule qui va copier ponctionner les ressources nécéssaire au projet

if(DF_projet_en_cours$projet[1]!= ""){
  #trouve la ligne du projet en cours
  ligne3 <- which(DF_projet_conditions_ressources$projet == DF_projet_en_cours$projet[1])
  
  #rajoute une étape en plus et trouve la référence
  DF_projet_en_cours$etat_avancement.sur.5[1]<-DF_projet_en_cours$etat_avancement.sur.5[1]+1
  if (DF_projet_en_cours$options[1] == 1){
    numerocolonne<-3+DF_projet_en_cours$etat_avancement.sur.5[1]
    petittableau<- DF_projet_optionsetapestxt%>%filter(Projet == DF_projet_en_cours$projet[1])
    DF_projet_en_cours$Etapes.en.en.cours[1]<- petittableau[1,numerocolonne]
  }
  if (DF_projet_en_cours$options[1] == 2){ 
    numerocolonne<-8+DF_projet_en_cours$etat_avancement.sur.5[1]
    petittableau<- DF_projet_optionsetapestxt%>%filter(Projet == DF_projet_en_cours$projet[1])
    DF_projet_en_cours$Etapes.en.en.cours[1]<- petittableau[1,numerocolonne]
  }
  
  #Enleve 1/5 des ressources conditionnés par ce projet
  DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Equipements[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Eau[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Nourriture[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Oxygene[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Essence_fusee[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Bulldozzer[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Camions[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Habitation[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Biodome[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Atelier[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Total_base[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Population[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_soldat[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_officier[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_civil[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Officier[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Civil[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Soldats[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] - (DF_projet_conditions_ressources$Unites_V2[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Detection_Sovietique[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Detection_USA[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] - (DF_projet_conditions_ressources$Unites_arme_super_puissante[ligne3] / 5)
  DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] <- DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] - (DF_projet_conditions_ressources$KWperiode_electricite[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_charbon[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_uranium[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_gaz[ligne3] / 5)
}

if(DF_projet_en_cours$projet[2]!= ""){
  #trouve la ligne du projet en cours
  ligne3 <- which(DF_projet_conditions_ressources$projet == DF_projet_en_cours$projet[2])
  
  #rajoute une étape en plus et trouve la référence
  DF_projet_en_cours$etat_avancement.sur.5[2]<-DF_projet_en_cours$etat_avancement.sur.5[2]+1
  if (DF_projet_en_cours$options[2] == 1){
    numerocolonne<-3+DF_projet_en_cours$etat_avancement.sur.5[2]
    petittableau<- DF_projet_optionsetapestxt%>%filter(Projet == DF_projet_en_cours$projet[1])
    DF_projet_en_cours$Etapes.en.en.cours[2]<- petittableau[1,numerocolonne]
  }
  if (DF_projet_en_cours$options[2] == 2){ 
    numerocolonne<-8+DF_projet_en_cours$etat_avancement.sur.5[2]
    petittableau<- DF_projet_optionsetapestxt%>%filter(Projet == DF_projet_en_cours$projet[2])
    DF_projet_en_cours$Etapes.en.en.cours[2]<- petittableau[1,numerocolonne]
  }
  
  #Enleve 1/5 des ressources conditionnés par ce projet
  DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Equipements[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Eau[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Nourriture[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Oxygene[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Essence_fusee[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Bulldozzer[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Camions[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Habitation[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Biodome[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Atelier[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Total_base[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Population[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_soldat[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_officier[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_civil[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Officier[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Civil[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Soldats[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] - (DF_projet_conditions_ressources$Unites_V2[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Detection_Sovietique[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Detection_USA[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] - (DF_projet_conditions_ressources$Unites_arme_super_puissante[ligne3] / 5)
  DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] <- DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] - (DF_projet_conditions_ressources$KWperiode_electricite[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_charbon[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_uranium[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_gaz[ligne3] / 5)
}

if(DF_projet_en_cours$projet[3]!= ""){
  #trouve la ligne du projet en cours
  ligne3 <- which(DF_projet_conditions_ressources$projet == DF_projet_en_cours$projet[3])
  
  #rajoute une étape en plus et trouve la référence
  DF_projet_en_cours$etat_avancement.sur.5[3]<-DF_projet_en_cours$etat_avancement.sur.5[3]+1
  if (DF_projet_en_cours$options[3] == 1){
    numerocolonne<-3+DF_projet_en_cours$etat_avancement.sur.5[3]
    petittableau<- DF_projet_optionsetapestxt%>%filter(Projet == DF_projet_en_cours$projet[1])
    DF_projet_en_cours$Etapes.en.en.cours[3]<- petittableau[1,numerocolonne]
  }
  if (DF_projet_en_cours$options[3] == 2){ 
    numerocolonne<-8+DF_projet_en_cours$etat_avancement.sur.5[3]
    petittableau<- DF_projet_optionsetapestxt%>%filter(Projet == DF_projet_en_cours$projet[3])
    DF_projet_en_cours$Etapes.en.en.cours[3]<- petittableau[1,numerocolonne]
  }
  
  #Enleve 1/5 des ressources conditionnés par ce projet
  DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Equipements[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Eau[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Nourriture[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Oxygene[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Essence_fusee[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Bulldozzer[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Camions[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Habitation[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Biodome[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Atelier[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Total_base[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Population[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_soldat[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_officier[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_civil[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Officier[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Civil[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Soldats[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] - (DF_projet_conditions_ressources$Unites_V2[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Detection_Sovietique[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Detection_USA[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] - (DF_projet_conditions_ressources$Unites_arme_super_puissante[ligne3] / 5)
  DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] <- DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] - (DF_projet_conditions_ressources$KWperiode_electricite[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_charbon[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_uranium[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_gaz[ligne3] / 5)
}

if(DF_projet_en_cours$projet[4]!= ""){
  #trouve la ligne du projet en cours
  ligne3 <- which(DF_projet_conditions_ressources$projet == DF_projet_en_cours$projet[4])
  
  #rajoute une étape en plus et trouve la référence
  DF_projet_en_cours$etat_avancement.sur.5[4]<-DF_projet_en_cours$etat_avancement.sur.5[4]+1
  if (DF_projet_en_cours$options[4] == 1){
    numerocolonne<-3+DF_projet_en_cours$etat_avancement.sur.5[4]
    petittableau<- DF_projet_optionsetapestxt%>%filter(Projet == DF_projet_en_cours$projet[1])
    DF_projet_en_cours$Etapes.en.en.cours[4]<- petittableau[1,numerocolonne]
  }
  if (DF_projet_en_cours$options[4] == 2){ 
    numerocolonne<-8+DF_projet_en_cours$etat_avancement.sur.5[4]
    petittableau<- DF_projet_optionsetapestxt%>%filter(Projet == DF_projet_en_cours$projet[4])
    DF_projet_en_cours$Etapes.en.en.cours[4]<- petittableau[1,numerocolonne]
  
  
  #Enleve 1/5 des ressources conditionnés par ce projet
  DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Equipements[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Eau[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Nourriture[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Oxygene[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_Essence_fusee[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Bulldozzer[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Camions[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Habitation[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Biodome[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Atelier[ligne3] / 5)
  DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] - (DF_projet_conditions_ressources$Surface_Total_base[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Population[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_soldat[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_officier[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Adhesion_ideologique_civil[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Officier[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Civil[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] - (DF_projet_conditions_ressources$Unites_Soldats[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] - (DF_projet_conditions_ressources$Unites_V2[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Detection_Sovietique[ligne3] / 5)
  DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] <- DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] - (DF_projet_conditions_ressources$Pourcentage_Detection_USA[ligne3] / 5)
  DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] - (DF_projet_conditions_ressources$Unites_arme_super_puissante[ligne3] / 5)
  DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] <- DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] - (DF_projet_conditions_ressources$KWperiode_electricite[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_charbon[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_uranium[ligne3] / 5)
  DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] <- DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] - (DF_projet_conditions_ressources$Tonnes_gaz[ligne3] / 5)
}

}


#formule qui va changer la variable de variation une fois le projet terminé

#d'abord on vire la formule qui est égale à 5

for (i in 1:4){
  if(DF_projet_en_cours$etat_avancement.sur.5[i]==5){
      ligne4 <- which(DF_projet_ress_var_realise$projet == DF_projet_en_cours$projet[i])
      
      #on copie les valeurs tu tableau valeurs mensuel au tableau valeur réalisé
      DF_projet_ress_var_realise$Tonnes_Equipements[ligne4] <- DF_projet_ress_var_mens$Tonnes_Equipements[ligne4]
      DF_projet_ress_var_realise$Tonnes_Eau[ligne4] <- DF_projet_ress_var_mens$Tonnes_Eau[ligne4]
      DF_projet_ress_var_realise$Tonnes_Nourriture[ligne4] <- DF_projet_ress_var_mens$Tonnes_Nourriture[ligne4]
      DF_projet_ress_var_realise$Tonnes_Oxygene[ligne4] <- DF_projet_ress_var_mens$Tonnes_Oxygene[ligne4]
      DF_projet_ress_var_realise$Tonnes_Essence_fusee[ligne4] <- DF_projet_ress_var_mens$Tonnes_Essence_fusee[ligne4]
      DF_projet_ress_var_realise$Unites_Bulldozzer[ligne4] <- DF_projet_ress_var_mens$Unites_Bulldozzer[ligne4]
      DF_projet_ress_var_realise$Unites_Camions[ligne4] <- DF_projet_ress_var_mens$Unites_Camions[ligne4]
      DF_projet_ress_var_realise$Surface_Habitation[ligne4] <- DF_projet_ress_var_mens$Surface_Habitation[ligne4]
      DF_projet_ress_var_realise$Surface_Biodome[ligne4] <- DF_projet_ress_var_mens$Surface_Biodome[ligne4]
      DF_projet_ress_var_realise$Surface_Atelier[ligne4] <- DF_projet_ress_var_mens$Surface_Atelier[ligne4]
      DF_projet_ress_var_realise$Surface_Total_base[ligne4] <- DF_projet_ress_var_mens$Surface_Total_base[ligne4]
      DF_projet_ress_var_realise$Unites_Population[ligne4] <- DF_projet_ress_var_mens$Unites_Population[ligne4]
      DF_projet_ress_var_realise$Pourcentage_Adhesion_ideologique_soldat[ligne4] <- DF_projet_ress_var_mens$Pourcentage_Adhesion_ideologique_soldat[ligne4]
      DF_projet_ress_var_realise$Pourcentage_Adhesion_ideologique_officier[ligne4] <- DF_projet_ress_var_mens$Pourcentage_Adhesion_ideologique_officier[ligne4]
      DF_projet_ress_var_realise$Pourcentage_Adhesion_ideologique_civil[ligne4] <- DF_projet_ress_var_mens$Pourcentage_Adhesion_ideologique_civil[ligne4]
      DF_projet_ress_var_realise$Unites_Officier[ligne4] <- DF_projet_ress_var_mens$Unites_Officier[ligne4]
      DF_projet_ress_var_realise$Unites_Civil[ligne4] <- DF_projet_ress_var_mens$Unites_Civil[ligne4]
      DF_projet_ress_var_realise$Unites_Soldats[ligne4] <- DF_projet_ress_var_mens$Unites_Soldats[ligne4]
      DF_projet_ress_var_realise$Unites_V2[ligne4] <- DF_projet_ress_var_mens$Unites_V2[ligne4]
      DF_projet_ress_var_realise$Pourcentage_Detection_Sovietique[ligne4] <- DF_projet_ress_var_mens$Pourcentage_Detection_Sovietique[ligne4]
      DF_projet_ress_var_realise$Pourcentage_Detection_USA[ligne4] <- DF_projet_ress_var_mens$Pourcentage_Detection_USA[ligne4]
      DF_projet_ress_var_realise$Unites_arme_super_puissante[ligne4] <- DF_projet_ress_var_mens$Unites_arme_super_puissante[ligne4]
      DF_projet_ress_var_realise$KWperiode_electricite[ligne4] <- DF_projet_ress_var_mens$KWperiode_electricite[ligne4]
      DF_projet_ress_var_realise$Tonnes_charbon[ligne4] <- DF_projet_ress_var_mens$Tonnes_charbon[ligne4]
      DF_projet_ress_var_realise$Tonnes_uranium[ligne4] <- DF_projet_ress_var_mens$Tonnes_uranium[ligne4]
      DF_projet_ress_var_realise$Tonnes_gaz[ligne4] <- DF_projet_ress_var_mens$Tonnes_gaz[ligne4]
      #on reset les valeurs du tableau tableau en cours
      
      DF_projet_en_cours$projet[i]<-""
      DF_projet_en_cours$options[i]<-""
      DF_projet_en_cours$etat_avancement.sur.5[i]<-0
      DF_projet_en_cours$Etapes.en.en.cours[i]<-0
  }
}






#formule qui impact les ressources


x<-DF_EVENEMENT_ressources%>%filter(is.na(Unites_Population))
numerodelaligne<- nrow(DF_EVENEMENT_ressources) - nrow(x)+1

#valeur qui seront modifié par les projets et qui influence la fonction "tour" et quisont déterminé par le nombre de gens et par la ressource precedente
populationfindutour <- DF_EVENEMENT_ressources$Unites_Population[numerodelaligne-1]
datefindutour<-DF_EVENEMENT_ressources$Date[numerodelaligne-1]




#l'electricité est produit par du charbon etde l oxygene sauf consignes contraire
#la consommation chnage en fonction des projets
#50kwh par mois quand ils vivent dans les fusées
#75kwh par mois quand ils vivent dans les bases
#+ avec atelier + avec biodome + avec usage camion et buldozzer qui fonctionne a lelectrcite
#+ avec armes superpuissantes
#On calcul la valeur du KWH qui dépend de la population et du nombre d'instalation réalisé
var_usure_KWperiode_electricite <- populationfindutour*prod(DF_projet_ress_var_realise$KWperiode_electricite, na.rm = TRUE)
var_usure_Tonnes_charbon <- (var_usure_KWperiode_electricite*DF_mixenergetique$pourcentage_charbon)/7000
var_usure_Tonnes_gaz <- (var_usure_KWperiode_electricite*DF_mixenergetique$pourcentage_gaz)/10000
var_usure_Tonnes_uranium <- (var_usure_KWperiode_electricite*DF_mixenergetique$pourcentage_uranium)/20000000


#par defaut baissepar tour 2% par personne et si atelier construit ensuite augmente de 0.1 % par metre carré mais cela on le met dans la formule de l'atelir
var_usure_Tonnes_Equipements <-0.02*populationfindutour
#par defaut baisse de 5 litres par personne par jour sauf avec biodome, cela fait plus
var_usure_Tonnes_Eau <- prod(DF_projet_ress_var_realise$Tonnes_Eau, na.rm = TRUE)*populationfindutour*31
#par defaut baisse de 1,5 kg par personne etpar jour mais augmente en cas de biodome
var_usure_Tonnes_Nourriture <- prod(DF_projet_ress_var_realise$Tonnes_Nourriture, na.rm = TRUE)*populationfindutour*31
#par defaut baisse de 1k par personne et par jours+la consommation pour electricte
var_usure_Tonnes_Oxygene <- (prod(DF_projet_ress_var_realise$Tonnes_Oxygene, na.rm = TRUE)*populationfindutour*31)+#population humaine
  (var_usure_Tonnes_charbon*3)+ #il faut 3kg d'oxygene pour faire bruler 1kg charbons
  (var_usure_Tonnes_gaz*10)+ #il faut 10 kg d'oxygene pour faire bruler 1kg de gaz
  (var_usure_Tonnes_uranium*0)#il ne faut pas d'oxygene pour faire de l'electricité avec de l'uranium


#par defaut ne change pas sauf utilisation ponctuelle
var_usure_Tonnes_Essence_fusee <- 0
#par defaut ne change pas sauf utilisation ponctuelle
var_usure_Unites_Bulldozzer <- 0
#par defaut ne change pas sauf utilisation ponctuelle
var_usure_Unites_Camions <- 0
#par defaut ne change pas sauf projet ponctuelle
var_usure_Surface_Habitation <-0
#par defaut ne change pas sauf projet ponctuelle
var_usure_Surface_Biodome <- 0
#par defaut ne change pas sauf projet ponctuelle
var_usure_Surface_Atelier <- 0
#var_usure_Surface_Total_base ne s'applique pas, calculer par la formule tour
#var_usure_Unites_Population <- ne s'applique pas, calculer par la formule tour



#par defaut ne change pas sauf projet ponctuelle
var_usure_Unites_Officier <- 0
var_usure_Unites_Civil <- 0
var_usure_Unites_Soldats <- 0
var_usure_Unites_V2 <- 0

var_usure_Pourcentage_Adhesion_ideologique_soldat<- prod(DF_projet_ress_var_realise$Pourcentage_Adhesion_ideologique_soldat , na.rm = TRUE)
var_usure_Pourcentage_Adhesion_ideologique_officier<- prod(DF_projet_ress_var_realise$Pourcentage_Adhesion_ideologique_officier , na.rm = TRUE)
var_usure_Pourcentage_Adhesion_ideologique_civil<- prod(DF_projet_ress_var_realise$Pourcentage_Adhesion_ideologique_civil , na.rm = TRUE)



#nevolue pas jusqu'en mai 1945 puis augmente de 2% par les usa et 3% parles russes
var_usure_Pourcentage_Detection_Sovietique <- if_else(datefindutour< "1945-05-09",0,prod(DF_projet_ress_var_realise$Pourcentage_Detection_Sovietique, na.rm = TRUE))
var_usure_Pourcentage_Detection_USA <-if_else(datefindutour< "1945-05-08",0,prod(DF_projet_ress_var_realise$Pourcentage_Detection_USA, na.rm = TRUE)) 



#par defaut ne change pas sauf projet ponctuelle
var_usure_Unites_arme_super_puissante <- 0


#DF_EVENEMENT_ressources$Date[numerodelaligne] <- DF_EVENEMENT_ressources$Date[numerodelaligne-1]
DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] <- round(DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne-1] - var_usure_Tonnes_Equipements,2)
DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] <- round(DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne-1] - var_usure_Tonnes_Eau,2)
DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] <- round(DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne-1] - var_usure_Tonnes_Nourriture,2)
DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] <- round(DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne-1] - var_usure_Tonnes_Oxygene,2)
DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] <- round(DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne-1] - var_usure_Tonnes_Essence_fusee,2)
DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne-1] - var_usure_Unites_Bulldozzer
DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne-1] - var_usure_Unites_Camions
DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne-1] - var_usure_Surface_Habitation
DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne-1] - var_usure_Surface_Biodome
DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] <- DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne-1] - var_usure_Surface_Atelier
DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] <- round(DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne-1] -var_usure_Pourcentage_Adhesion_ideologique_soldat,2)
DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] <- round(DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne-1] - var_usure_Pourcentage_Adhesion_ideologique_officier,2)
DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] <- round(DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne-1] - var_usure_Pourcentage_Adhesion_ideologique_civil,2)
DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne-1] - var_usure_Unites_Officier
DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne-1] - var_usure_Unites_Civil
DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne-1] - var_usure_Unites_Soldats
DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_V2[numerodelaligne-1] - var_usure_Unites_V2
DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] <- round(DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne-1] + var_usure_Pourcentage_Detection_Sovietique,2)
DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] <- round(DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne-1] + var_usure_Pourcentage_Detection_USA,2)
DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] <- DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne-1] - var_usure_Unites_arme_super_puissante
DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] <-round(var_usure_KWperiode_electricite,0)
DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] <- round(DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne-1] - var_usure_Tonnes_charbon,2)
DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] <- round(DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne-1] - var_usure_Tonnes_uranium,2)
DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne] <- round(DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne-1] - var_usure_Tonnes_gaz,2)

#formule differentes des autres
DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] <- 
  DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne]+
  DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne]+
  DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne]

DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] <-
  DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne]+
  DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne]+
  DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne]

#cause fin du jeu

message <- case_when(
  
  #cause fin de ressources
  DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne]<0~"la partie est terminée, vous n'avez plus d'eau, les habitants de la base sont morts de soif. C'est bien fait pour vous bandes de sales nazis!",
  DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne]<0~"la partie est terminée, il n'y a plus de nourriture, les habitants de la base sont mort de faim. C'est bien fait pour vous bandes de sales nazis!",
  DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne]<0~"la partie est terminée, il n'y a plus d'oxygène, les habitants de la base sont morts étouffés. C'est bien fait pour vous bandes de sales nazis!",
  #cause cout d'état
  DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne]<=0.25~ "vous êtes renversé par un coup d'état par vos officiers. Un autre nazi va prendre ta place. J'espère que vous allez échouer bande de sales nazis",
  (DF_EVENEMENT_ressources$Tonnes_charbon [numerodelaligne]+
     DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne]+
     DF_EVENEMENT_ressources$Tonnes_gaz [numerodelaligne])<=0~ "vous n'avez plus d'énergie, vous ne savez plus rien entreprendre, votre base va périr par le froid. C'est bien fait pour vous bandes de sales nazis!",
  #cause detection URSS
  DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne]>=1~ "l'URSS vient d'envoyer une bombe Tsar sur votre base, vous avez perdu. Une bonne manière d'éradiquer les nazis!",
  #cause detection URSS
  DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne]>=1~ "Les américains ont envoyé des spaces marines qui ont conquis votre base. Les officiers US vont peut être sauvez les officiers les plus talentueux, un peu comme von brauwn, pour le reste vous aller y passer sale nazi !",
  TRUE~"tour suivant commencé")
# print(message)






# Charger le classeur
wb <- loadWorkbook("C:/Users/u99amo/Downloads/German on the moon_sauvegarde.xlsx")
# Ajouter le dataframe 'df' en tant que nouvelle feuille nommée 'new_sheet'
# Si une feuille nommée 'new_sheet' existe déjà, elle sera remplacée
writeData(wb, "DF_EVENEMENT_ressources", DF_EVENEMENT_ressources)
# Sauvegarder le classeur
saveWorkbook(wb, "C:/Users/u99amo/Downloads/German on the moon_sauvegarde.xlsx", overwrite = TRUE)

print(message)
### Bouton tour suivant (fin) -----






### Bouton afficher les nouveaux projets ----
#le programme va verifier
#a) si la liste des projets a proposé répond aux condiions de ressources
#b) si la liste des projets a proposé n'a pas déja été réalisé
#c) si laliste des projets à proposé répond aux conditions d'existence d'un autre projet déja réalisé

Listequirespecte_conditions_ressources<- DF_projet_conditions_ressources %>%
  filter(Tonnes_Equipements <= DF_EVENEMENT_ressources$Tonnes_Equipements[numerodelaligne] ) %>%
  filter(Tonnes_Eau <= DF_EVENEMENT_ressources$Tonnes_Eau[numerodelaligne] ) %>%
  filter(Tonnes_Nourriture <= DF_EVENEMENT_ressources$Tonnes_Nourriture[numerodelaligne] ) %>%
  filter(Tonnes_Oxygene <= DF_EVENEMENT_ressources$Tonnes_Oxygene[numerodelaligne] ) %>%
  filter(Tonnes_Essence_fusee <= DF_EVENEMENT_ressources$Tonnes_Essence_fusee[numerodelaligne] ) %>%
  filter(Unites_Bulldozzer <= DF_EVENEMENT_ressources$Unites_Bulldozzer[numerodelaligne] ) %>%
  filter(Unites_Camions <= DF_EVENEMENT_ressources$Unites_Camions[numerodelaligne] ) %>%
  filter(Surface_Habitation <= DF_EVENEMENT_ressources$Surface_Habitation[numerodelaligne] ) %>%
  filter(Surface_Biodome <= DF_EVENEMENT_ressources$Surface_Biodome[numerodelaligne] ) %>%
  filter(Surface_Atelier <= DF_EVENEMENT_ressources$Surface_Atelier[numerodelaligne] ) %>%
  filter(Surface_Total_base <= DF_EVENEMENT_ressources$Surface_Total_base[numerodelaligne] ) %>%
  filter(Unites_Population <= DF_EVENEMENT_ressources$Unites_Population[numerodelaligne] ) %>%
  filter(Pourcentage_Adhesion_ideologique_soldat <= DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_soldat[numerodelaligne] ) %>%
  filter(Pourcentage_Adhesion_ideologique_officier <= DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_officier[numerodelaligne] ) %>%
  filter(Pourcentage_Adhesion_ideologique_civil <= DF_EVENEMENT_ressources$Pourcentage_Adhesion_ideologique_civil[numerodelaligne] ) %>%
  filter(Unites_Officier <= DF_EVENEMENT_ressources$Unites_Officier[numerodelaligne] ) %>%
  filter(Unites_Civil <= DF_EVENEMENT_ressources$Unites_Civil[numerodelaligne] ) %>%
  filter(Unites_Soldats <= DF_EVENEMENT_ressources$Unites_Soldats[numerodelaligne] ) %>%
  filter(Unites_V2 <= DF_EVENEMENT_ressources$Unites_V2[numerodelaligne] ) %>%
  filter(Pourcentage_Detection_Sovietique <= DF_EVENEMENT_ressources$Pourcentage_Detection_Sovietique[numerodelaligne] ) %>%
  filter(Pourcentage_Detection_USA <= DF_EVENEMENT_ressources$Pourcentage_Detection_USA[numerodelaligne] ) %>%
  filter(Unites_arme_super_puissante <= DF_EVENEMENT_ressources$Unites_arme_super_puissante[numerodelaligne] ) %>%
  filter(KWperiode_electricite <= DF_EVENEMENT_ressources$KWperiode_electricite[numerodelaligne] ) %>%
  filter(Tonnes_charbon <= DF_EVENEMENT_ressources$Tonnes_charbon[numerodelaligne] ) %>%
  filter(Tonnes_uranium <= DF_EVENEMENT_ressources$Tonnes_uranium[numerodelaligne] ) %>%
  filter(Tonnes_gaz <= DF_EVENEMENT_ressources$Tonnes_gaz[numerodelaligne])%>%
  select(projet)

Listedesprojestpasencorelance<-DF_projet_optionsetapestrue%>%
  filter(projetlance!=1)%>%select(projet)

Listeprojetatester<-Listedesprojestpasencorelance%>%
  mutate(ressourceOK = projet%in%Listequirespecte_conditions_ressources$projet)%>%
  filter(ressourceOK == TRUE)%>%
  select(projet)
rm(Listequirespecte_conditions_ressources )

verifiesiprojetOKavecconditionprojet<-function(projetx){
  #projetx<-Listeprojetatester$projet[8]
  
  x1<- DF_projet_Condtions_projets%>%filter(projet == projetx)%>%pull(Condtions1)
  x2<- DF_projet_Condtions_projets%>%filter(projet == projetx)%>%pull(Condtions2)
  x3<- DF_projet_Condtions_projets%>%filter(projet == projetx)%>%pull(Condtions3)
  x4<- DF_projet_Condtions_projets%>%filter(projet == projetx)%>%pull(Condtions4)
  x5<- DF_projet_Condtions_projets%>%filter(projet == projetx)%>%pull(Condtions5)
  
  reponseconditions1<- if_else(is.na(x1),1,
                    if_else(!x1%in%Listedesprojestpasencorelance$projet,1,0))
  reponseconditions2<- if_else(is.na(x2),1,
                               if_else(!x2%in%Listedesprojestpasencorelance$projet,1,0))
  reponseconditions3<- if_else(is.na(x3),1,
                               if_else(!x3%in%Listedesprojestpasencorelance$projet,1,0))
  reponseconditions4<- if_else(is.na(x4),1,
                               if_else(!x5%in%Listedesprojestpasencorelance$projet,1,0))
  reponseconditions5<- if_else(is.na(x5),1,
                               if_else(!x5%in%Listedesprojestpasencorelance$projet,1,0))
  
  reponse <- reponseconditions1+
    reponseconditions2+
    reponseconditions3+
    reponseconditions4+
    reponseconditions5
  
  resultat<-if_else(reponse==5, "projetOK","projetpasok")
  return(resultat)
}

Listeprojetatester<- Listeprojetatester%>%mutate(condition = lapply(Listeprojetatester$projet,verifiesiprojetOKavecconditionprojet))

Listeprojetatester<- Listeprojetatester%>%filter(condition == "projetOK")%>%select(projet)



rm(Listedesprojestpasencorelance)
rm(verifiesiprojetOKavecconditionprojet)

print("voici la liste des projets à créér")
print(Listeprojetatester)

### Bouton afficher les nouveaux projets  (fin) ----


### Bouton choisir un projet à créér ----
nrow(Listeprojetatester)
choixprojetnr <- readline(prompt="Veuillez choisir le numéro du projet proposé")
### Bouton choisir un projet à créér (fin - input) ----

### Bouton créé le projet choisis ----
choixprojetnr<-as.integer(choixprojetnr)
# Vérifier si le titre choisi existe dans le dataframe
if (choixprojetnr >0 & choixprojetnr <= nrow(Listeprojetatester) ) {
  # Rajouter le projet suivi ainsi que la date
  choixprojet_txt <- Listeprojetatester$projet[choixprojetnr]
  print(paste("Le projet ",choixprojet_txt," a été lancé"))
  #rajouter dans le tableau qui reprend tout les projets réalisés
  # Trouvez l'index de la ligne contenant "choixprojet_txt"
  ligne <- which(DF_projet_optionsetapestrue$projet == choixprojet_txt)
  # Ajoutez 1 à la valeur dans la colonne "projetlance" de cette ligne
  DF_projet_optionsetapestrue$projetlance[ligne] <- DF_projet_optionsetapestrue$projetlance [ligne] + 1
  
  #rajouter dans le tableau qui reprend tout les projets en cours

  ligne2<- nrow(DF_projet_en_cours%>%filter(projet == ""))
  DF_projet_en_cours$projet[ligne2]<- choixprojet_txt
  } else {
  print("Le numéro choisi n'existe pas, veuilliez recommencer.")
}
### Bouton créé le projet choisis(fin) ----

### Sous boutons : choix du sous projet ----

presentationprojet<- DF_projet_optionsetapestxt%>%filter(Projet == choixprojet_txt)%>%select(`Option.1.0.-`,`Option.2.0.-`)
presentationprojet_liste<-c(presentationprojet$`Option.1.0.-`[1],presentationprojet$`Option.2.0.-`[1])
rm(presentationprojet)
print(paste("Il y a deux manières de réaliser le projet :",choixprojet_txt," , merci de choisir le 1 ou le 2"))
print(presentationprojet_liste)

choixoptionnr <- readline(prompt="Veuillez choisir le numéro de l'option proposé")
### Sous boutons : choix du sous projet  (fin - input) ----


### boutons : Lancement du projet avec options  ----

#enregistrement du projet dans la database
choixoptionnr<-as.integer(choixoptionnr)
choixoption_txt <- presentationprojet_liste[choixoptionnr]
if(choixoptionnr==1){
        ligne<- which(DF_projet_optionsetapestxt$`Option.1.0.-` == choixoption_txt)
        DF_projet_optionsetapestrue$`Option.1.0.-`[ligne] <- DF_projet_optionsetapestrue$`Option.1.0.-`[ligne] + 1
        cinqetapesduprojet<-c(
          DF_projet_optionsetapestxt$`Option.1.1.-`[ligne],
          DF_projet_optionsetapestxt$`Option.1.2.-`[ligne],
          DF_projet_optionsetapestxt$`Option.1.3.-`[ligne],
          DF_projet_optionsetapestxt$`Option.1.4.-`[ligne],
          DF_projet_optionsetapestxt$`Option.1.5.-`[ligne])
        
        #j'enregistre l'option dans projet en cours si c'est option 1
        DF_projet_en_cours$options[ligne2]<- 1
}else{
        ligne<- which(DF_projet_optionsetapestxt$`Option.2.0.-` == choixoption_txt)
        DF_projet_optionsetapestrue$`Option.2.0.-`[ligne] <- DF_projet_optionsetapestrue$`Option.2.0.-`[ligne] + 1
        cinqetapesduprojet<-c(
          DF_projet_optionsetapestxt$`Option.2.1.-`[ligne],
          DF_projet_optionsetapestxt$`Option.2.2.-`[ligne],
          DF_projet_optionsetapestxt$`Option.2.3.-`[ligne],
          DF_projet_optionsetapestxt$`Option.2.4.-`[ligne],
          DF_projet_optionsetapestxt$`Option.2.5.-`[ligne])
        #j'enregistre l'option dans projet en cours si c'est option 2
        DF_projet_en_cours$options[ligne2]<- 2

        
}
#enregistrement du numéro de l'option et du texte de l'option 
DF_projet_en_cours$etat_avancement.sur.5[ligne2] <-1
DF_projet_en_cours$Etapes.en.en.cours[ligne2] <-choixoption_txt

print(paste("vous avez choisis le projet : ",choixprojet_txt ))
print(paste ("vous avez choisis l'option : ",choixoption_txt ))
print("le projet est lancé, voici ses 5 étapes")
print(cinqetapesduprojet)

### boutons : Lancement du projet avec options (fin) ----





#archives ---- 

### Bouton afficher liste des projets en cours ainsi que l'option choisis----
### Sous boutons choisir de changer une options  d'un des sous projets----




DF_projet_Condtions_projets%>%filter(Conditions1)

Listedesprojestpasdanslesconditionspourprojet
Listedesprojestpasencorelance[5]

DF_projet_Condtions_projets$Exploitation.de.ressources.minérales.locales



DF_projet_Condtions_projets%>%
  filter(`Construction.de.l'atelier.de.la.base` )

glimpse(DF_projet_Condtions_projets)


### Sous boutons choisir le projet ou pas de projet 
### Sous boutons choisir quel options pour le projet choisis


naturelle(1)
du tableau evenement qui va regrouper toute les données jour après jour ----
  
  
  
  TABLEAU_EVENEMENT <- read.xlsx("C:/Users/u99amo/Downloads/GotM_TABLEAU_EVENEMENT.xlsx", sheet = "Feuil1", colNames = TRUE, detectDates = TRUE )

TABLEAU_EVENEMENT<-TABLEAU_EVENEMENT%>%mutate(nbrdecivilautravail =0)

#2 Creation du tableau actions avec les taches et les projets

TABLEAU_ACTIONS<- read.xlsx("C:/Users/u99amo/Downloads/GotM_tableau_actions.xlsx", sheet = "Feuil1", colNames = TRUE, detectDates = TRUE )




#3 Essais moteur 1 ----








#choixdelaligne dans tableau evenement à remplacer par une formule 
i<-1

#3 Création du formulaire de question pour le joueur----
##3.A on lui demande de choisir le projet en fonction des règles de conditions pour chaque missions ----
TABLEAU_ACTIONS_projet_disponible <- TABLEAU_ACTIONS %>%   
  filter(`projet/taches` == "Projet") %>%
  filter(début.date.validité <= TABLEAU_EVENEMENT$Date[i]) %>%
  filter(fin.date.validité >= TABLEAU_EVENEMENT$Date[i]) %>%
  filter(Conditions_Tonnes_Equipements <= TABLEAU_EVENEMENT$Tonnes_Equipements[i]) %>%
  filter(Conditions_Tonnes_Eau <= TABLEAU_EVENEMENT$Tonnes_Eau[i]) %>%
  filter(Conditions_Tonnes_Nourriture <= TABLEAU_EVENEMENT$Tonnes_Nourriture[i]) %>%
  filter(Conditions_Tonnes_Oxygene <= TABLEAU_EVENEMENT$Tonnes_Oxygene[i]) %>%
  filter(Conditions_Tonnes_Essence_fusee <= TABLEAU_EVENEMENT$Tonnes_Essence_fusee[i]) %>%
  filter(Conditions_Unites_Bulldozzer <= TABLEAU_EVENEMENT$Unites_Bulldozzer[i]) %>%
  filter(Conditions_Unites_Camions <= TABLEAU_EVENEMENT$Unites_Camions[i]) %>%
  filter(Conditions_Surface_Habitation <= TABLEAU_EVENEMENT$Surface_Habitation[i]) %>%
  filter(Conditions_Surface_Biodome <= TABLEAU_EVENEMENT$Surface_Biodome[i]) %>%
  filter(Conditions_Surface_Atelier <= TABLEAU_EVENEMENT$Surface_Atelier[i]) %>%
  filter(Conditions_Surface_Total_base <= TABLEAU_EVENEMENT$Surface_Total_base[i]) %>%
  filter(Conditions_Unites_Population <= TABLEAU_EVENEMENT$Unites_Population[i]) %>%
  filter(Conditions_Pourcentage_Adhesion_ideologique_soldat <= TABLEAU_EVENEMENT$Pourcentage_Adhesion_ideologique_soldat[i]) %>%
  filter(Conditions_Pourcentage_Adhesion_ideologique_officier <= TABLEAU_EVENEMENT$Pourcentage_Adhesion_ideologique_officier[i]) %>%
  filter(Conditions_Pourcentage_Adhesion_ideologique_civil <= TABLEAU_EVENEMENT$Pourcentage_Adhesion_ideologique_civil[i]) %>%
  filter(Conditions_Unites_Officier <= TABLEAU_EVENEMENT$Unites_Officier[i]) %>%
  filter(Conditions_Unites_Civil <= TABLEAU_EVENEMENT$Unites_Civil[i]) %>%
  filter(Conditions_Unites_Soldats <= TABLEAU_EVENEMENT$Unites_Soldats[i]) %>%
  filter(Conditions_Unites_V2 <= TABLEAU_EVENEMENT$Unites_V2[i]) %>%
  filter(Conditions_Pourcentage_Detection_Sovietique <= TABLEAU_EVENEMENT$Pourcentage_Detection_Sovietique[i]) %>%
  filter(Conditions_Pourcentage_Detection_USA <= TABLEAU_EVENEMENT$Pourcentage_Detection_USA[i]) %>%
  filter(Conditions_Unites_arme_super_puissante <= TABLEAU_EVENEMENT$Unites_arme_super_puissante[i]) %>%
  filter(Conditions_KWperiode_electricite <= TABLEAU_EVENEMENT$KWperiode_electricite[i]) %>%
  filter(Conditions_Tonnes_charbon <= TABLEAU_EVENEMENT$Tonnes_charbon[i]) %>%
  filter(Conditions_Tonnes_uranium <= TABLEAU_EVENEMENT$Tonnes_uranium[i]) %>%
  filter(Conditions_Tonnes_gaz <= TABLEAU_EVENEMENT$Tonnes_gaz[i])%>%select(titre)

print(TABLEAU_ACTIONS_projet_disponible$titre)

# Demander à l'utilisateur de choisir un titre
choix_titre <- readline(prompt="Veuillez choisir un titre sans les guillements : ")

### PAUSE ECRIRE LA REPONSE

# Vérifier si le titre choisi existe dans le dataframe
if (choix_titre %in% TABLEAU_ACTIONS$titre) {
  # Rajouter le projet suivi ainsi que la date
  info_joueur <- i
  
  
  # Mettre à jour la colonne "joueur" pour la ligne choisie
  TABLEAU_ACTIONS[TABLEAU_ACTIONS$titre == choix_titre, "joueur"] <- info_joueur
  
  print("L'information du joueur a été mise à jour avec succès.")
} else {
  print("Le titre choisi n'existe pas dans le dataframe.")
}

#3.B On lui présente les sous taches du projet choisis et il doit mettre des valeurs pour chacune 

categoriesoustache<- TABLEAU_ACTIONS %>%   
  filter(`projet/taches` == "Projet") %>%
  filter(joueur == i)%>%pull(catégorie)

questionsoustache<- TABLEAU_ACTIONS %>%   
  filter(`projet/taches` == "tache") %>%
  filter(catégorie == categoriesoustache)%>%select(titre)


print(questionsoustache)

# Demander à l'utilisateur de choisir un titre
choix_tache1 <- readline(prompt="veuilliez indiquez le nombre d'homme pour cette mission : ")

### PAUSE ECRIRE LA REPONSE

choix_tache1<-as.integer(choix_tache1)

TABLEAU_EVENEMENT$nbrdecivilautravail[i+1]<-TABLEAU_EVENEMENT$nbrdecivilautravail[i+1]+choix_tache1



TABLEAU_EVENEMENT$Unites_Population[i+1]<-TABLEAU_EVENEMENT$Unites_Population[i]-choix_tache1





#3 Essais moteur simulation d'un joueur 2.----


#Le processus est le suivant
#au premier tour, le joueur a le choix entre cliquer directement sur fin de tour ou de lancer 1,2,3 ou 4 projets parmis une liste de 15 projets disponibles 
#pour chaque projet, il peut choisir deux options différentes
#par exemple
# Veux tu créer le biodome oui non
#si oui veux tu l'option A ou B : A OR B OR annuler


#au 2e tours et jusqu'a la fin 
#En fonction du nombre de projet qui sont lancé (0,1,2,3,4)

# Tu peux 
#créér un projet (sauf si déja 4).

# pour chaque projet créé, tu peux
# soit le mettre en pause
# soit choisir une autre option
# soit ne rien faire

#une fois que toute les fonctions sont finies, tu dois appuyer sur bouton fin de tour et recommencer l'opération Tu recois églament un score

#Tu dois faire cela 120 fois et tu obtiens le score final










# Liste de projets
projets <- paste("Projet", 1:15)

# Liste des options
options <- c("A", "B")

# Combinaisons possibles de projets et d'options
combinaisons <- expand.grid(projet = projets, option = options)

# Ajout de l'option de finir le tour
combinaisons <- rbind(combinaisons, data.frame(projet = "Fin de tour", option = NA))

# Afficher les combinaisons
print(combinaisons)



# Liste de tous les projets
projets <- c("Projet1", "Projet2")

# Liste de tous les états possibles
etats <- c("Non lancé", "OptionA", "OptionB")

# Fonction qui génère tous les états possibles à partir d'un état donné
generer_etats <- function(etat_courant) {
  # Pour chaque projet, générer tous les états possibles
  etats_possibles <- lapply(etat_courant, function(projet) {
    if (projet == "Non lancé") {
      return(c("OptionA", "OptionB"))
    } else {
      return(c("Non lancé", "OptionA", "OptionB"))
    }
  })
  
  return(etats_possibles)
}

# Fonction pour effectuer une recherche en profondeur d'abord (DFS)
DFS <- function(etat_initial, depth) {
  if (depth == 0) {
    return(list(etat_initial))
  } else {
    # Générer tous les états possibles à partir de l'état actuel
    etats_possibles <- generer_etats(etat_initial)
    
    # Pour chaque état possible, effectuer une recherche DFS
    resultats <- lapply(etats_possibles, function(etat) {
      return(DFS(etat, depth - 1))
    })
    
    return(resultats)
  }
}

# Effectuer une recherche DFS à partir de l'état initial
etat_initial <- c("Non lancé", "Non lancé")
resultats <- DFS(etat_initial, 3)  # Effectuer une recherche DFS avec une profondeur de 3














# # Création d'un vecteur pour stocker les réponses de l'utilisateur
# joueur <- character(length(titre))
# # Boucle pour demander à l'utilisateur de saisir une réponse pour chaque ligne du tableau
# for (i in 1:nrow(TABLEAU_ACTIONS_projet)) {
#   message(paste("Que voulez-vous faire avec la tâche '", TABLEAU_ACTIONS_projet$titre[i], "' ? (faire = 1 /ne jamais faire = 2/ attendre = 3)"))
#   joueur[i] <- readline(prompt = "")
# }
# 
# #eccrire les réponse
# 
# #faire tourner la suite du code
# 
# 
# # Ajout de la colonne "joueur" au data frame
# TABLEAU_ACTIONS$joueur <- joueur
# 
# # Affichage du data frame mis à jour
# TABLEAU_ACTIONS
# 
# 
# 
# 
# 
# # Demander à l'utilisateur d'entrer une valeur 
# print("Entrez une valeur :")
# x <- as.numeric(readline())
# 
# # Définir une fonction qui utilise la valeur entrée 
# f <- function() {
#   resultat <- x * 2
#   print(resultat)
# }
# 
# # Exécuter la fonction
# f()
# 
# # Demander à l'utilisateur d'entrer une nouvelle valeur
# # et ré-exécuter la fonction
# print("Entrez une nouvelle valeur :") 
# x <- as.numeric(readline()) 
# f()
